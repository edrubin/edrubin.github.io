ylab("Probability Visitor Responds to First Message") +
xlab("Group") +
theme(legend.position = "none")
ggplot(
data = tmp1, aes(grp_fac, V1)) +
geom_col(aes(fill = grp_fac), width = 0.5) +
theme_pander() +
scale_color_viridis("Agent's gender: ", option = "B", discrete = T) +
ylab("Probability Visitor Responds to First Message") +
xlab("Group") +
theme(legend.position = "none") +
scale_fill_viridis(option = "B", discrete = T)
ggplot(
data = tmp1, aes(grp_fac, V1)) +
geom_col(aes(fill = grp_fac), width = 0.5) +
theme_pander() +
scale_color_viridis("Agent's gender: ", option = "B", discrete = T) +
ylab("Probability Visitor Responds to First Message") +
xlab("Group") +
theme(legend.position = "none") +
scale_fill_viridis(option = "B", discrete = T, start = 0.2, end = 0.9)
ggplot(
data = tmp1, aes(grp_fac, V1)) +
geom_col(aes(fill = grp_fac), width = 0.5) +
theme_pander() +
scale_color_viridis("Agent's gender: ", option = "B", discrete = T) +
ylab("Probability Visitor Responds to First Message") +
xlab("Group") +
theme(legend.position = "none") +
scale_fill_viridis(option = "B", discrete = T, begin = 0.2, end = 0.9)
tmp1 <- chats_dt[
!(is.na(default_avatar) | is.na(first_name_gender)),
mean(total_messages > 1),
by = .(default_avatar, first_name_gender)]
tmp1[, grp := paste0(default_avatar, first_name_gender)]
tmp1[, grp_fac := factor(grp, labels =
c("Non-Default Avatar\nFemale Name",
"Non-Default Avatar\nMale Name",
"Default Avatar\nFemale Name",
"Default Avatar\nMale Name"))]
ggplot(
data = tmp1, aes(grp_fac, V1)) +
geom_col(aes(fill = grp_fac), width = 0.5) +
theme_pander() +
scale_color_viridis("Agent's gender: ", option = "B", discrete = T) +
ylab("Probability Visitor Responds to First Message") +
xlab("Group") +
theme(legend.position = "none") +
scale_fill_viridis(option = "B", discrete = T, begin = 0.2, end = 0.9)
tmp2 <- chats_dt[
!(is.na(default_avatar) | is.na(first_name_gender)),
mean(agent_positive > 0),
by = .(default_avatar, first_name_gender)]
tmp2[, grp := paste0(default_avatar, first_name_gender)]
tmp2[, grp_fac := factor(grp, labels =
c("Non-Default Avatar\nFemale Name",
"Non-Default Avatar\nMale Name",
"Default Avatar\nFemale Name",
"Default Avatar\nMale Name"))]
tmp2
ggplot(
data = tmp2, aes(grp_fac, V1)) +
geom_col(aes(fill = grp_fac), width = 0.5) +
theme_pander() +
scale_color_viridis("Agent's gender: ", option = "B", discrete = T) +
ylab("Probability Visitor Responds to First Message") +
xlab("Group") +
theme(legend.position = "none") +
scale_fill_viridis(option = "B", discrete = T, begin = 0.2, end = 0.9)
tmp2 <- chats_dt[
!(is.na(default_avatar) | is.na(first_name_gender)),
mean(visitor_positive > 0),
by = .(default_avatar, first_name_gender)]
tmp2[, grp := paste0(default_avatar, first_name_gender)]
tmp2[, grp_fac := factor(grp, labels =
c("Non-Default Avatar\nFemale Name",
"Non-Default Avatar\nMale Name",
"Default Avatar\nFemale Name",
"Default Avatar\nMale Name"))]
tmp2
chats_dt
tmp2 <- chats_dt[
!(is.na(default_avatar) | is.na(first_name_gender)),
mean(visitor_positive > 0, na.rm = T),
by = .(default_avatar, first_name_gender)]
tmp2[, grp := paste0(default_avatar, first_name_gender)]
tmp2[, grp_fac := factor(grp, labels =
c("Non-Default Avatar\nFemale Name",
"Non-Default Avatar\nMale Name",
"Default Avatar\nFemale Name",
"Default Avatar\nMale Name"))]
ggplot(
data = tmp2, aes(grp_fac, V1)) +
geom_col(aes(fill = grp_fac), width = 0.5) +
theme_pander() +
ylab("Probability Visitor Responds to First Message") +
xlab("Group") +
theme(legend.position = "none") +
scale_fill_viridis(option = "B", discrete = T, begin = 0.2, end = 0.9)
tmp2
ggplot(
data = tmp2, aes(grp_fac, V1)) +
geom_col(aes(fill = grp_fac), width = 0.5) +
theme_pander() +
ylab("Probability Visitor Responds to First Message") +
xlab("Group") +
theme(legend.position = "none") +
scale_fill_viridis(option = "B", discrete = T, begin = 0.2, end = 0.9)
dir_figures
dir_save <- "/Users/edwardarubin/Dropbox/Research/MyProjects/GenderBiases/Exhibits/Figures/"
dir_save <- "/Users/edwardarubin/Dropbox/Research/MyProjects/GenderBiases/Exhibits/Figures/"
tmp1 <- chats_dt[
!(is.na(default_avatar) | is.na(first_name_gender)),
mean(total_messages > 1),
by = .(default_avatar, first_name_gender)]
tmp1[, grp := paste0(default_avatar, first_name_gender)]
tmp1[, grp_fac := factor(grp, labels =
c("Non-Default Avatar\nFemale Name",
"Non-Default Avatar\nMale Name",
"Default Avatar\nFemale Name",
"Default Avatar\nMale Name"))]
ggsave(path = dir_save, filename = "barProbabilityVisitorResponds.pdf", width = 9, height = 6)
tmp1 <- chats_dt[
!(is.na(default_avatar) | is.na(first_name_gender)),
mean(total_messages > 1),
by = .(default_avatar, first_name_gender)]
tmp1[, grp := paste0(default_avatar, first_name_gender)]
tmp1[, grp_fac := factor(grp, labels =
c("Non-Default Avatar\nFemale Name",
"Non-Default Avatar\nMale Name",
"Default Avatar\nFemale Name",
"Default Avatar\nMale Name"))]
ggsave(path = dir_save, filename = "barProbabilityVisitorResponds.pdf", width = 10, height = 6)
dir_save <- "/Users/edwardarubin/Dropbox/Research/MyProjects/GenderBiases/Exhibits/Figures/"
tmp1 <- chats_dt[
!(is.na(default_avatar) | is.na(first_name_gender)),
mean(total_messages > 1),
by = .(default_avatar, first_name_gender)]
tmp1[, grp := paste0(default_avatar, first_name_gender)]
tmp1[, grp_fac := factor(grp, labels =
c("Non-Default Avatar\nFemale Name",
"Non-Default Avatar\nMale Name",
"Default Avatar\nFemale Name",
"Default Avatar\nMale Name"))]
ggplot(
data = tmp1, aes(grp_fac, V1)) +
geom_col(aes(fill = grp_fac), width = 0.5) +
theme_pander() +
ylab("Probability Visitor Responds to First Message") +
xlab("Group") +
theme(legend.position = "none") +
scale_fill_viridis(option = "B", discrete = T, begin = 0.2, end = 0.9)
ggsave(path = dir_save, filename = "barProbabilityVisitorResponds.pdf", width = 10, height = 6)
tmp2 <- chats_dt[
!(is.na(default_avatar) | is.na(first_name_gender)),
mean(visitor_positive > 0, na.rm = T),
by = .(default_avatar, first_name_gender)]
tmp2[, grp := paste0(default_avatar, first_name_gender)]
tmp2[, grp_fac := factor(grp, labels =
c("Non-Default Avatar\nFemale Name",
"Non-Default Avatar\nMale Name",
"Default Avatar\nFemale Name",
"Default Avatar\nMale Name"))]
ggplot(
data = tmp2, aes(grp_fac, V1)) +
geom_col(aes(fill = grp_fac), width = 0.5) +
theme_pander() +
ylab("Probability Visitor Uses a Positive Word") +
xlab("Group") +
theme(legend.position = "none") +
scale_fill_viridis(option = "B", discrete = T, begin = 0.2, end = 0.9)
ggsave(path = dir_save, filename = "barProbabilityVisitorPositive.pdf", width = 10, height = 6)
# Setup ------------------------------------------------------------------------
# Options
options(stringsAsFactors = F)
Sys.setenv(TZ = "US/Pacific")
# Packages
library(pacman)
p_load(
extrafont, ggplot2, ggthemes, viridis, lfe,
readr, data.table, tm, tidytext, lubridate, stringr, magrittr)
# Libraries
dir_project <- "/Users/edwardarubin/Dropbox/Research/MyProjects/GenderBiases/"
dir_raw <- paste0(dir_project, "Data/Raw/")
dir_inter <- paste0(dir_project, "Data/Intermediate/")
dir_figures <- paste0(dir_project, "Exhibits/Figures/ChatSummaries/")
# Load Eddy's agent data -------------------------------------------------------
# Load the CSV
agent_roster <- read_csv(paste0(dir_raw, "agents_eddy.csv"),
na = c("", "NA", "N/A")) %>% data.table()
# Drop column of row numbers
agent_roster[, X1 := NULL]
# Change variable names (remove punctuation and spaces)
setnames(agent_roster,
names(agent_roster) %>%
str_to_lower() %>%
str_replace_all("\\(picture\\) ", "") %>%
str_replace_all("\\s", "_"))
# Indicate agents using the default avatar
agent_roster[, default_avatar :=
str_detect(avatar, "ab5b0666feffd67600206cd519fd77ea")]
# Keep (and name) desired columns
agent_roster <- agent_roster[, .(
agent_name = name,
permission,
agent_id = login,
default_avatar,
first_name_gender,
last_name_ethnicity,
avatar_gender,
avatar_race
)]
# Save datasets ----------------------------------------------------------------
chat_dt <- readRDS(
file = paste0(dir_inter, "chatDT.rds"))
chats_dt <- readRDS(
file = paste0(dir_inter, "chatsDT.rds"))
visitor_dt <- readRDS(
file = paste0(dir_inter, "visitorDT.rds"))
agent_dt <- readRDS(
file = paste0(dir_inter, "agentDT.rds"))
visitor_words <- readRDS(
file = paste0(dir_inter, "visitorWordsDT.rds"))
agent_words <- readRDS(
file = paste0(dir_inter, "agentWordsDT.rds"))
chat_dt
# Load chat data ---------------------------------------------------------------
# Load 2016 chat data
chat16_dt <- read_csv(paste0(dir_raw, "chat_sessions16.csv")) %>% data.table()
# Load 2017 chat data
chat17_dt <- read_csv(paste0(dir_raw, "chat_sessions17.csv")) %>% data.table()
# Convert dates
# NOTE: Which timezone do we want to use?
chat16_dt[, `:=`(
date_start = str_sub(started, 6, 25) %>% mdy_hms(),
date_end = str_sub(ended, 6, 25) %>% mdy_hms()
)]
chat17_dt[, `:=`(
date_start = str_sub(started, 6, 25) %>% mdy_hms(),
date_end = str_sub(ended, 6, 25) %>% mdy_hms()
)]
# Define vector of variables that we would like to keep
var_chat <- c("id", "visitor_id", "visitor_name", "visitor_ip",
"duration", "date_start", "date_end", "timezone", "agents_df")
# Grab desired variables and combine datasets
chat_dt <- rbindlist(list(
chat16_dt[, var_chat, with = F],
chat17_dt[, var_chat, with = F]
))
# Drop individual datasets
rm(chat16_dt, chat17_dt); gc()
# Keep observations starting 01 July 2016
chat_dt <- chat_dt[date_start >= ymd("2016-07-01")]
chat_dt %>% head
chat16_dt <- read_csv(paste0(dir_raw, "chat_sessions16.csv")) %>% data.table()
# Load 2017 chat data
chat17_dt <- read_csv(paste0(dir_raw, "chat_sessions17.csv")) %>% data.table()
# Convert dates
# NOTE: Which timezone do we want to use?
chat16_dt[, `:=`(
date_start = str_sub(started, 6, 25) %>% mdy_hms(),
date_end = str_sub(ended, 6, 25) %>% mdy_hms()
)]
chat17_dt[, `:=`(
date_start = str_sub(started, 6, 25) %>% mdy_hms(),
date_end = str_sub(ended, 6, 25) %>% mdy_hms()
)]
chat_dt <- rbindlist(list(
chat16_dt[, var_chat, with = F],
chat17_dt[, var_chat, with = F]
), use.names = T)
chat_dt
chat16_dt
# Save datasets ----------------------------------------------------------------
chat_dt <- readRDS(
file = paste0(dir_inter, "chatDT.rds"))
chats_dt <- readRDS(
file = paste0(dir_inter, "chatsDT.rds"))
visitor_dt <- readRDS(
file = paste0(dir_inter, "visitorDT.rds"))
agent_dt <- readRDS(
file = paste0(dir_inter, "agentDT.rds"))
visitor_words <- readRDS(
file = paste0(dir_inter, "visitorWordsDT.rds"))
agent_words <- readRDS(
file = paste0(dir_inter, "agentWordsDT.rds"))
chats_dt[
!(is.na(default_avatar) | is.na(first_name_gender)),
mean(total_messages > 1),
by = .(default_avatar, first_name_gender)]
chats_dt[
!(is.na(default_avatar) | is.na(first_name_gender)),
mean(visitor_positive > 0, na.rm = T),
by = .(default_avatar, first_name_gender)]
chats_dt[
!(is.na(default_avatar) | is.na(first_name_gender)),
mean(agent_positive > 0, na.rm = T),
by = .(default_avatar, first_name_gender)]
# Setup ------------------------------------------------------------------------
# Options
options(stringsAsFactors = F)
Sys.setenv(TZ = "US/Pacific")
# Packages
library(pacman)
p_load(
extrafont, ggplot2, ggthemes, viridis, lfe,
readr, data.table, tm, tidytext, lubridate, stringr, magrittr)
# Libraries
dir_project <- "/Users/edwardarubin/Dropbox/Research/MyProjects/GenderBiases/"
dir_raw <- paste0(dir_project, "Data/Raw/")
dir_inter <- paste0(dir_project, "Data/Intermediate/")
dir_figures <- paste0(dir_project, "Exhibits/Figures/ChatSummaries/")
# Save datasets ----------------------------------------------------------------
chat_dt <- readRDS(
file = paste0(dir_inter, "chatDT.rds"))
chats_dt <- readRDS(
file = paste0(dir_inter, "chatsDT.rds"))
visitor_dt <- readRDS(
file = paste0(dir_inter, "visitorDT.rds"))
agent_dt <- readRDS(
file = paste0(dir_inter, "agentDT.rds"))
visitor_words <- readRDS(
file = paste0(dir_inter, "visitorWordsDT.rds"))
agent_words <- readRDS(
file = paste0(dir_inter, "agentWordsDT.rds"))
agent_dt
agent_words
chat_dt
chats_dt
chats_dt
rm(list = ls())
# Setup ------------------------------------------------------------------------
# Options
options(stringsAsFactors = F)
Sys.setenv(TZ = "US/Pacific")
# Packages
library(pacman)
p_load(
extrafont, ggplot2, ggthemes, viridis, lfe,
readr, data.table, tm, tidytext, lubridate, stringr, magrittr)
# Libraries
dir_project <- "/Users/edwardarubin/Dropbox/Research/MyProjects/GenderBiases/"
dir_raw <- paste0(dir_project, "Data/Raw/")
dir_inter <- paste0(dir_project, "Data/Intermediate/")
dir_figures <- paste0(dir_project, "Exhibits/Figures/ChatSummaries/")
# Load Eddy's agent data -------------------------------------------------------
# Load the CSV
agent_roster <- read_csv(paste0(dir_raw, "agents_eddy.csv"),
na = c("", "NA", "N/A")) %>% data.table()
# Drop column of row numbers
agent_roster[, X1 := NULL]
# Change variable names (remove punctuation and spaces)
setnames(agent_roster,
names(agent_roster) %>%
str_to_lower() %>%
str_replace_all("\\(picture\\) ", "") %>%
str_replace_all("\\s", "_"))
# Indicate agents using the default avatar
agent_roster[, default_avatar :=
str_detect(avatar, "ab5b0666feffd67600206cd519fd77ea")]
# Keep (and name) desired columns
agent_roster <- agent_roster[, .(
agent_name = name,
permission,
agent_id = login,
default_avatar,
first_name_gender,
last_name_ethnicity,
avatar_gender,
avatar_race
)]
# Load chat data ---------------------------------------------------------------
# Load 2016 chat data
chat16_dt <- read_csv(paste0(dir_raw, "chat_sessions16.csv")) %>% data.table()
# Load 2017 chat data
chat17_dt <- read_csv(paste0(dir_raw, "chat_sessions17.csv")) %>% data.table()
# Convert dates
# NOTE: Which timezone do we want to use?
chat16_dt[, `:=`(
date_start = str_sub(started, 6, 25) %>% mdy_hms(),
date_end = str_sub(ended, 6, 25) %>% mdy_hms()
)]
chat17_dt[, `:=`(
date_start = str_sub(started, 6, 25) %>% mdy_hms(),
date_end = str_sub(ended, 6, 25) %>% mdy_hms()
)]
# Define vector of variables that we would like to keep
var_chat <- c("id", "visitor_id", "visitor_name", "visitor_ip",
"duration", "date_start", "date_end", "timezone", "agents_df")
# Grab desired variables and combine datasets
chat_dt <- rbindlist(list(
chat16_dt[, var_chat, with = F],
chat17_dt[, var_chat, with = F]
), use.names = T)
# Drop individual datasets
rm(chat16_dt, chat17_dt); gc()
# Keep observations starting 01 July 2016
chat_dt <- chat_dt[date_start >= ymd("2016-07-01")]
chat_dt
# Load event data --------------------------------------------------------------
# Load 2016 event data
event16_dt <- read_csv(paste0(dir_raw, "events16.csv")) %>% data.table()
# Load 2017 event data
event17_dt <- read_csv(paste0(dir_raw, "events17.csv")) %>% data.table()
# Merge event datasets
event_dt <- rbindlist(list(event16_dt, event17_dt), use.names = T)
# Drop year-specific datasets
rm(event16_dt, event17_dt); gc()
# Format dates (first remove the day of week from the string)
event_dt[, date := str_sub(date, 6, 25) %>% mdy_hms()]
# Drop row number (read in as "X1")
event_dt[, X1 := NULL]
# Drop other unwanted variables
event_dt[, c("welcome_message", "files", "details") := NULL]
# Grab only the messages and drop 'type'.
# NOTE: This drop excludes "attachments" and  "events", where "events" include
# leaving chat, losing connection, etc.
event_dt <- event_dt[type == "message"]
event_dt[, type := NULL]
# Order by date and timestamp
setorder(event_dt, date, timestamp)
# Within-chat counter (of messages)
event_dt[, counter_message := 1:.N, by = id]
# Within-chat by author-type counter
event_dt[, counter_author := 1:.N, by = .(user_type, id)]
# Add year, month, week, day-of-week, day-of-month, and date as integer
event_dt[, `:=`(
year = year(date),
month = month(date),
week = week(date),
day = day(date),
qday = qday(date),
wday = wday(date, week_start = 7, abbr = T),
yday = yday(date),
date_int = date %>% format("%Y-%m-%d") %>% ymd() %>% as.numeric()
)]
# Keep observations starting 01 July 2016
event_dt <- event_dt[date >= ymd("2016-07-01")]
# Summarize event data ---------------------------------------------------------
# Numbers of words and characters in the message
event_dt[, `:=`(
n_words = str_count(text, "\\S+"),
n_char = nchar(text)
)]
# Number of messages and total number of words in the chat
event_dt[, `:=`(
total_messages = .N,
total_words = sum(n_words),
total_char = sum(n_char)
), by = id]
# Create word-tokenized data.tables by type of author, maintaining the
# variables 'id' and 'counter_message' to be able to return to the main
# dataset ('id' and 'counter_message' provide unique message ID)
agent_word <- event_dt[user_type == "agent",
.(id, counter_message, text)] %>%
unnest_tokens(word, text)
supervisor_word <- event_dt[user_type == "supervisor",
.(id, counter_message, text)] %>%
unnest_tokens(word, text)
visitor_word <- event_dt[user_type == "visitor",
.(id, counter_message, text)] %>%
unnest_tokens(word, text)
# Join sentiment using 'AFINN' lexicon
# NOTE: Other lexicons are available (e.g., Loughran or NRC)
agent_word %<>% merge(y = get_sentiments("afinn"),
by = "word", all.x = T, all.y = F, sort = F)
supervisor_word %<>% merge(y = get_sentiments("afinn"),
by = "word", all.x = T, all.y = F, sort = F)
visitor_word %<>% merge(y = get_sentiments("afinn"),
by = "word", all.x = T, all.y = F, sort = F)
setnames(agent_word, old = "score", new = "score_afinn")
setnames(supervisor_word, old = "score", new = "score_afinn")
setnames(visitor_word, old = "score", new = "score_afinn")
# Join sentiment using 'Bing' lexicon
agent_word %<>% merge(y = get_sentiments("bing"),
by = "word", all.x = T, all.y = F, sort = F)
supervisor_word %<>% merge(y = get_sentiments("bing"),
by = "word", all.x = T, all.y = F, sort = F)
visitor_word %<>% merge(y = get_sentiments("bing"),
by = "word", all.x = T, all.y = F, sort = F)
setnames(agent_word, old = "sentiment", new = "sentiment_bing")
setnames(supervisor_word, old = "sentiment", new = "sentiment_bing")
setnames(visitor_word, old = "sentiment", new = "sentiment_bing")
# Aggregate sentiments/scores to the id-message level
agent_dt <- agent_word[, .(
mean_afinn = mean(score_afinn, na.rm = T),
n_negative = sum(sentiment_bing == "negative", na.rm = T),
n_positive = sum(sentiment_bing == "positive", na.rm = T),
share_match = mean(!is.na(score_afinn))
), by = .(id, counter_message)]
supervisor_dt <- supervisor_word[, .(
mean_afinn = mean(score_afinn, na.rm = T),
n_negative = sum(sentiment_bing == "negative", na.rm = T),
n_positive = sum(sentiment_bing == "positive", na.rm = T),
share_match = mean(!is.na(score_afinn))
), by = .(id, counter_message)]
visitor_dt <- visitor_word[, .(
mean_afinn = mean(score_afinn, na.rm = T),
n_negative = sum(sentiment_bing == "negative", na.rm = T),
n_positive = sum(sentiment_bing == "positive", na.rm = T),
share_match = mean(!is.na(score_afinn))
), by = .(id, counter_message)]
visitor_dt
visitor_word
agent_word
chats_dt
event_dt
event_dt
chat_dt
setwd("Dropbox/Websites/edrubin.github.io/")
library(rmarkdown)
render_site("research.Rmd")
