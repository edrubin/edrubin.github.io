geom_crossbar(
data = gg_dt[, .(x, mean, lower, upper)] %>% unique(),
aes(y = mean, ymin = lower, ymax = upper),
width = 0.75,
fill = magma(10)[2],
color = "white",
size = 0.5,
alpha = 0.75
) +
geom_abline(
intercept = 0,
slope = 1,
color = magma(10)[8],
linetype = "dashed",
size = 0.8,
NULL
) +
theme_pander(
# base_family = "Roboto",
base_family = "sans",
base_size = 19
)
# Save it
ggsave(
plot = gg_tmp,
path = dir_figures,
filename = filename,
height = 5.3,
width = 8.5
)
}
gg_dt %>% dim
postscriptFonts()
names(postscriptFonts())
# Figure: EPA vs. satellite PM (CBG-level), boxes and scatter --------------------------------------
# Define outcome(s) (estimate) of interest
for (outcome in c("pm_di_3yr", "pm_vdna_3yr", "pm_vdg_3yr")) {
# for (outcome in c("pm_di_3yr")) {
# Define years of interest
y1 <- 2005; y2 <- 2005
# y1 <- 2003; y2 <- 2007
# Create year-based subtitles
if (uniqueN(c(y1, y2)) == 1) {
subtitle <- y1
} else {
subtitle <- paste0(y1, "â€“", y2)
}
# Define a subtitle and file name based upon the outcome
if (outcome == "pm_di_3yr") {
subtitle <- paste0("Di \\textit{et al.} Estimates, ", subtitle)
filename  <- paste0(
# "Graphs/BoxScatter/box_cbg_di_",
"Paper/box_cbg_di_",
paste(unique(c(y1,y2)), collapse = "_"),
# ".png"
# ".pdf"
".eps"
)
}
if (outcome == "pm_vdna_3yr") {
subtitle <- paste0("van Donkelaar \\textit{et al.} North America Estimates, ", subtitle)
filename  <- paste0(
# "Graphs/BoxScatter/box_cbg_vdna_",
"Paper/box_cbg_vdna_",
paste(unique(c(y1,y2)), collapse = "_"),
# ".png"
# ".pdf"
".eps"
)
}
if (outcome == "pm_vdg_3yr") {
subtitle <- paste0("van Donkelaar \\textit{et al.} Global Estimates, ", subtitle)
filename  <- paste0(
# "Graphs/BoxScatter/VDGlobal/box_cbg_vdg_",
"Paper/box_cbg_vdg_",
paste(unique(c(y1,y2)), collapse = "_"),
# ".png"
# ".pdf"
".eps"
)
}
# Create a dataset
gg_dt <- box_dt[year %>% between(y1, y2), c(
"year", "x", y = ..outcome
)]
setnames(gg_dt, old = outcome, new = "y")
# Add the mean, median, 2.5th and 97.5th percentiles (by 1-unit cells)
gg_dt[, `:=`(
mean = mean(y, na.rm = T),
median = median(y, na.rm = T),
lower = quantile(y, 0.025, na.rm = T),
upper = quantile(y, 0.975, na.rm = T)
), by = x]
# Set seed (for jittering within cells)
set.seed(12345)
# The figure
gg_tmp <- ggplot(
data = gg_dt,
aes(x = x, y = y)
) +
xlab(TeX("County-Wide Monitor-Based PM$_{2.5}$ $\\left(\\mu g/m^3\\right)$")) +
scale_x_continuous(
limits = c(-3, 30.5),
breaks = c(-2.5, seq(0, 30, 5)),
labels = c("No\nMonitor", seq(0, 30, 5)),
minor_breaks = seq(2.5, 27.5, 5),
na.value = -2.5
) +
ylab(TeX("Satellite-Estimated PM$_{2.5}$ $\\left(\\mu g/m^3\\right)$")) +
ylim(0, 30.5) +
# ggtitle(
#   TeX(
#     "Comparing PM$_{2.5}$ Measurements: Monitors \\textit{vs.} Satellite Estimates"
#   ),
#   subtitle = TeX(subtitle)
# ) +
geom_segment(
aes(x = 0, xend = 0, y = 0, yend = 30.5),
color = "grey70"
) +
geom_segment(
aes(x = 0, xend = 30.5, y = 0, yend = 0),
color = "grey70"
) +
geom_jitter(
alpha = ifelse(uniqueN(c(y1,y2)) == 1, 0.1, 0.025),
width = 0.18,
color = magma(10)[1],
size = 0.5,
NULL
) +
geom_crossbar(
data = gg_dt[, .(x, mean, lower, upper)] %>% unique(),
aes(y = mean, ymin = lower, ymax = upper),
width = 0.75,
fill = magma(10)[2],
color = "white",
size = 0.5,
alpha = 0.75
) +
geom_abline(
intercept = 0,
slope = 1,
color = magma(10)[8],
linetype = "dashed",
size = 0.8,
NULL
) +
theme_pander(
# base_family = "Roboto",
base_family = "Helvetica",
base_size = 19
)
# Save it
ggsave(
plot = gg_tmp,
path = dir_figures,
filename = filename,
height = 5.3,
width = 8.5
)
}
# Setup ----------------------------------------------------------------------------------
# Options
options(stringsAsFactors = F)
# Packages
library(pacman)
p_load(
ggplot2, ggthemes, latex2exp, Cairo, viridis,
maps, sf, parallel,
lfe, rpart, party, glmnet,
tidyverse, haven, data.table, magrittr
)
# Directories
dir_project  <- "~/Dropbox/Research/MyProjects/Air pollution modeling/"
dir_data     <- dir_project %>% paste0("Data/")
dir_figures  <- dir_project %>% paste0("Figures/")
# Load PM data ---------------------------------------------------------------------------
# Load CBG dataset
pm_dt <- dir_data %>%
paste0("PM_all_wide.dta") %>%
read_dta() %>%
data.table()
# Load EPA/Census BG data ----------------------------------------------------------------
# Load the individual files (states) and bind together
bg_dt <- mclapply(
X = paste0(dir_data, "CensusEPA") %>% dir(full.names = T),
FUN = function(x) {
# Load
tmp <- readRDS(x)
# Names to lower case
setnames(tmp, tmp %>% names() %>% str_to_lower())
# Drop geo_id
tmp[, geo_id := NULL]
# Return tmp
return(tmp)
}, mc.cores = 4
) %>% rbindlist()
# Rename variables
setnames(bg_dt, old = "blkgrp", new = "blockgroup")
# Load monitor data ----------------------------------------------------------------------
# Load monitor dataset
monitor_dt <- dir_data %>%
paste0("Processed/MonitorLevel.dta") %>%
read_dta() %>%
data.table()
# Clean data: CBG PM2.5 data -------------------------------------------------------------
# Pad state and county to match across datasets
pm_dt[, `:=`(
state = str_pad(state, 2, "left", 0),
county = str_pad(county, 3, "left", 0)
)]
# Create id_cbg and fips to match other files
pm_dt[, id_cbg := paste(
state,
county,
tract,
blockgroup
)]
pm_dt[, fips := paste(state, county)]
# Drop unwanted geographic variables
pm_dt[, c("state", "countyname", "county", "tract", "blockgroup") := NULL]
# Drop monitoring data (will use the monitor-level data in monitor_dt)
pm_dt[, c("pm_AQSwEvents_3yr", "pm_AQSwEvents_p98", "pm_AQSnoEvents_3yr",
"pm_AQSnoEvents_p98", "pm_IMPROVE_3yr", "pm_IMPROVE_p98") := NULL]
# For number-of-monitors variables: change NAs to 0s
pm_dt[is.na(nMonitors_AQSnoEvents), nMonitors_AQSnoEvents := 0]
pm_dt[is.na(nMonitors_AQSwEvents), nMonitors_AQSwEvents := 0]
pm_dt[is.na(nMonitors_IMPROVE), nMonitors_IMPROVE := 0]
# Drop non-attainment variables
pm_dt[, c("naa97_bg_2011", "naa06_bg_2011", "naa12_bg_2015", "naa97_ctyP_2011",
"naa97_ctyW_2011", "naa06_ctyP_2011", "naa06_ctyW_2011", "naa12_ctyP_2015",
"naa12_ctyW_2015", "naa97_ctyP_2005", "naa97_ctyW_2005") := NULL]
# Drop 3-year variables
pm_dt[, c("pm_vdna_3yr", "pm_vdna_3yrOLD", "pm_vdg_3yr", "pm_di_3yr") := NULL]
# Clean data: EPA/Census BG data ---------------------------------------------------------
# Reformat tract to match other files
bg_dt[, tract := paste0(str_sub(tract, 1, 4), ".", str_sub(tract, 5, 6))]
# Create id_cbg and fips to match other files
bg_dt[, id_cbg := paste(
state,
county,
tract,
blockgroup
)]
bg_dt[, fips := paste(state, county)]
# Drop unwanted variables
bg_dt[, c("state", "county", "tract", "blockgroup", "name", "lsad") := NULL]
# Clean data: Monitors -------------------------------------------------------------------
# Drop monitors outside of the continental US
monitor_dt <- monitor_dt[state %in% state.fips$fips]
# Replace "N/A" OR "wEvents" with "raw"; "noEvents" to "adjusted"
monitor_dt[dataset2 %in% c("wEvents", "N/A"), dataset2 := "raw"]
monitor_dt[dataset2 == "noEvents", dataset2 := "adjusted"]
# Create a unique ID for monitors; drop sitecode and poc
monitor_dt[, id_monitor := paste0(sitecode, " ", poc)]
monitor_dt[, c("sitecode", "poc", "sitename") := NULL]
# Replace "NA" with NA for tract
monitor_dt[tract == "NA", tract := NA]
# Widen dataset
monitor_dt %<>% dcast(
dataset + id_monitor + year + state + county + tract + blockgroup ~
dataset2,
value.var = c("pm_mean", "pm_p98")
)
setnames(
monitor_dt,
monitor_dt %>% names() %>% str_replace_all("adjusted", "adj")
)
# Pad state and county
monitor_dt[, `:=`(
state = as.character(state),
county = as.character(county)
)]
monitor_dt[!is.na(state), state := str_pad(state, 2, "left", 0)]
monitor_dt[!is.na(county), county := str_pad(county, 3, "left", 0)]
# Create an ID for CBG and county
monitor_dt[!is.na(state) & !is.na(county), id_cbg := paste(state, county, tract, blockgroup)]
monitor_dt[!is.na(state) & !is.na(county), fips := paste(state, county)]
# Drop state, county, tract, blockgroup
monitor_dt[, c("state", "county", "tract", "blockgroup") := NULL]
# Change copy raw to adjusted for IMPROVE network
monitor_dt[dataset == "IMPROVE", `:=`(
pm_mean_adj = pm_mean_raw,
pm_p98_adj = pm_p98_raw
)]
# Merge data -----------------------------------------------------------------------------
# Join together monitor-level dataset w/ Katie's cleaned CBG data (pm_dt)
joint_dt <- merge(
x = monitor_dt,
y = pm_dt,
by = c("id_cbg", "fips", "year"),
all.x = F, all.y = F
)
# Also join with the BG data (bg_dt)
joint_dt %<>% merge(
y = bg_dt,
by = c("id_cbg", "fips", "year"),
all.x = F, all.y = F
)
# Data work: Joint dataset ---------------------------------------------------------------
# Calculate prediction error for raw data
joint_dt[, `:=`(
e_di_raw = pm_mean_raw - pm_diAnnual,
e_vdna_raw = pm_mean_raw - pm_vdnaAnnual,
e_vdg_raw = pm_mean_raw - pm_vdgAnnual,
ldiff_di_raw = log(pm_mean_raw) - log(pm_diAnnual),
ldiff_vdna_raw = log(pm_mean_raw) - log(pm_vdnaAnnual),
ldiff_vdg_raw = log(pm_mean_raw) - log(pm_vdgAnnual)
)]
# Calculate prediction error for adjusted data
joint_dt[, `:=`(
e_di_adj = pm_mean_adj - pm_diAnnual,
e_vdna_adj = pm_mean_adj - pm_vdnaAnnual,
e_vdg_adj = pm_mean_adj - pm_vdgAnnual,
ldiff_di_adj = pm_mean_adj - pm_diAnnual,
ldiff_vdna_adj = pm_mean_adj - pm_vdnaAnnual,
ldiff_vdg_adj = pm_mean_adj - pm_vdgAnnual
)]
# Join the state abbreviation
joint_dt %<>% merge(
y = data.table(statename = state.name, state_ab = state.abb),
by = "statename",
all.x = T, all.y = F
)
joint_dt[statename == "District Of Columbia", state_ab := "DC"]
# Drop the state name
joint_dt[, statename := NULL]
# Data work: Create classification dataset -----------------------------------------------
# Drop any observations missing values
cl_dt <- joint_dt %>% na.omit()
# Delete the levels
cl_dt[, c("pm_vdnaAnnual", "pm_vdgAnnual", "pm_diAnnual") := NULL]
# Create shares from counts
setnames(cl_dt, old = "popTotal", new = "total_pop")
pop_vars <- cl_dt %>% names() %>% str_subset("^pop")
for (i in pop_vars) {
set(
x = cl_dt,
j = str_replace(i, "^pop", "shr"),
value = cl_dt[,..i] / cl_dt[,"total_pop"]
)
}
# Drop shrCDC
cl_dt[, shrCDC := NULL]
# Define datasets for the RHS of the equation
# All possible variables
rhs <- names(cl_dt) %>%
str_subset("^[^e][^_]") %>%
# Drop outcome variables
setdiff(str_subset(names(cl_dt), "^ldiff")) %>%
# Drop dataset, year, IDs, FIPs, etc.
setdiff(c("id_cbg", "fips", "id_monitor", "airRegion", "censusarea", "state_ab"))
rhs %<>% setdiff(c("dataset", "year"))
# Socioeconomic variables only
rhs_social <- names(cl_dt) %>%
str_subset("^[^e][^_]") %>%
setdiff(c("id_cbg", "fips", "id_monitor", "airRegion", "censusarea", "state_ab")) %>%
str_subset("^shr|^inc|^pop|^rate|^total")
# Non-socioeconomics variables
rhs_nonsocial <- setdiff(rhs, rhs_social)
rhs_social %<>% str_subset("^[^p]")
# Figure: EPA vs. satellite PM (monitor-level), boxes and scatter ------------------------
# Iterate over datasets
for (outcome in c("pm_diAnnual", "pm_vdnaAnnual", "pm_vdgAnnual")) {
# Create file name and labels
if (outcome == "pm_diAnnual") {
label <- "Di \\textit{et al.} Estimates"
filename  <- paste0(
# "Graphs/BoxScatter/box_monitor_di_",
"Paper/box_monitor_di_",
"all_years",
# ".png"
".pdf"
)
}
if (outcome == "pm_vdnaAnnual") {
label <- "van Donkelaar \\textit{et al.} North America Estimates"
filename  <- paste0(
# "Graphs/BoxScatter/box_monitor_vdna_",
"Paper/box_monitor_vdna_",
"all_years",
# ".png"
".pdf"
)
}
if (outcome == "pm_vdgAnnual") {
label <- "van Donkelaar \\textit{et al.} Global Estimates"
filename  <- paste0(
# "Graphs/BoxScatter/VDGlobal/box_monitor_vdg_",
"Paper/box_monitor_vdg_",
"all_years",
# ".png"
".pdf"
)
}
# Create a dataset with 1-unit bins of monitor-based PM2.5
gg_dt <- joint_dt[pm_mean_raw < 30.5, c(
x = "pm_mean_raw",
y = ..outcome
)]
setnames(gg_dt, c("x", "y"))
gg_dt[, x := x %>% round(0)]
gg_dt[, `:=`(
y = y,
mean = mean(y, na.rm = T),
median = median(y, na.rm = T),
lower = quantile(y, 0.025, na.rm = T),
upper = quantile(y, 0.975, na.rm = T)
), by = x]
# The figure
set.seed(12345)
gg_tmp <- ggplot(
data = gg_dt,
aes(x,y)
) +
xlab(TeX("Monitor-Based PM$_{2.5}$ $\\left(\\mu g/m^3\\right)$")) +
scale_x_continuous(
limits = c(0, 30.5),
breaks = seq(0, 30, 5),
labels = seq(0, 30, 5),
minor_breaks = seq(2.5, 27.5, 5)
) +
ylab(TeX("Satellite-Estimated PM$_{2.5}$ $\\left(\\mu g/m^3\\right)$")) +
ylim(0, 30.5) +
# ggtitle(TeX(paste0(
#   "Comparing PM$_{2.5}$ Measurements: Monitor-Level Measurements \\textit{vs.}",
#   label
# ))) +
geom_segment(
aes(x = 0, xend = 0, y = 0, yend = 30.5),
color = "grey70"
) +
geom_segment(
aes(x = 0, xend = 30.5, y = 0, yend = 0),
color = "grey70"
) +
geom_jitter(
alpha = 0.1,
width = 0.18,
color = magma(10)[1],
size = 0.5,
NULL
) +
geom_crossbar(
data = gg_dt[, .(x, mean, lower, upper)] %>% unique(),
aes(y = mean, ymin = lower, ymax = upper),
width = 0.75,
fill = magma(10)[2],
color = "white",
size = 0.5,
alpha = 0.75
) +
geom_abline(
intercept = 0,
slope = 1,
color = magma(10)[8],
linetype = "dashed",
NULL
) +
theme_pander(
# base_family = "Roboto",
base_family = "sans",
base_size = 19
)
# Save it
ggsave(
plot = gg_tmp,
path = dir_figures,
filename = filename,
height = 5.3,
width = 8.5
)
}
dir_figures
setwd("Dropbox/Websites/edrubin.github.io/")
dir()
rmarkdown::render_site("research.Rmd")
rmarkdown::render_site("research.Rmd")
rmarkdown::render_site("research.Rmd")
rmarkdown::render_site("research.Rmd")
rmarkdown::render_site("research.Rmd")
rmarkdown::render_site("research.Rmd")
rmarkdown::render_site("research.Rmd")
rmarkdown::render_site("research.Rmd")
xaringan:::inf_mr()
xaringan:::inf_mr()
reg_2c
reg_2c[2]
coef(reg_2c)[2]
round(coef(reg_2c)[2],2)
round(coef(reg_2c)[2],3)
xaringan:::inf_mr()
xaringan:::inf_mr()
?format
?extract()
names(mobility_df)
mobility_df
tidy(reg_2c)
lm(prob_q5_q1 ~ share_middleclass + share_married, data = mobility_df) %>% tidy()
lm(prob_q5_q1 ~ share_middleclass + share_black, data = mobility_df) %>% tidy()
lm(prob_q5_q1 ~ share_middleclass + share_divorced, data = mobility_df) %>% tidy()
cor(mobility_df$share_married, mobility_df$prob_q5_q1)
cor(mobility_df$share_black, mobility_df$prob_q5_q1)
cor(mobility_df$share_black, mobility_df$prob_q5_q1) %>% format(digits = 2)
lm(prob_q5_q1 ~ share_middleclass + share_divorced, data = mobility_df) %>% tidy()
lm(prob_q5_q1 ~ share_middleclass, data = mobility_df) %>% tidy()
lm(prob_q5_q1 ~ share_middleclass + i_urban, data = mobility_df) %>% tidy()
lm(prob_q5_q1 ~ share_middleclass + i_married, data = mobility_df) %>% tidy()
lm(prob_q5_q1 ~ share_middleclass + share_married, data = mobility_df) %>% tidy()
lm(prob_q5_q1 ~ share_middleclass + share_married + share_black, data = mobility_df) %>% tidy()
xaringan:::inf_mr()
